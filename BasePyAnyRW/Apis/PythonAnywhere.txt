jose luis elisseche 
https://pyteam2024.pythonwhere.com/plantas /usuarios

con GitBash en directorio PythonAnywhere
python --version
pip --version o python.exe -m pip install --upgrade pip pip --version 
activar Entornos de variable o reinstalar python
pip install virtualenv
me paro en consola en carpeta de trabajo copio portapapeles 
cmd cd.. c://carpeta ttrabajo
virtualenv CarpetaProyecto
crea carpeta con entorno virtual CarpetaProyecto
Ir a Scripts activar activate.bat
Python app.py

En phytonanywhere
Crear usuario y clave de 8 con letras y numeros en Python ANywhere anotar usu y password
me registro RaulWeissmann1
Servidor python anywhere una api
1 vamos a ventana web
2 agregar una nueva web click
3 siguiente
4 seleccionar framework flask y python ultima version que tengan
5 sacar flask y poner app.py sino crea flask.py
6 enter siguiente crea proyecto RaulWeissmann1.Pythonanywhere.com
7 reload
8 crea carpeta mysite y archivo app.py o flask.py
9 abro app.py escribio hello world y creo 
10 web reload recarga usuario 
11 a mi disco tomo contenido app.py y llevo contenido al app.py
12 En carpeta mysite creo carpeta modelos y llevo los modelos
13 En carpeta mysite creo carpeta controladores
14 En carpeta controladores subo archivos controladores
15 En carpeta modelos subo archivos modelos
En carpeta mysite tengo app.py
16 Voy a carpeta database e inicializo modelo. Le pongo la misma password y confirmo
17 Click inicialice
18 Crea db con clave anotar clave en papel
host adress rweissmann1.mysql.pythonanywhere-services.com
Username: rweissmann1
Clave usu y clave db RWei10669#$
Base rweissmann1$default
19 Crea bd usuario$default o el nombre que hayamos puesto (pero entonces crea 2 db y hay que borrar defaulkt)
20 Imprimo pantalla con nombre de base y usuario
21 Voy a Files app.py modifico bd root:root@ piso local host con esa url que me dio y ese nombre de db
22 Piso usuario con nuevo 1er root y clave de bd con nueva 2do root y nombre de db con usurio$default o nombre que usemos
22 Guardo app.py Save
23 Consola Bash correr linea larga de python pip install flask y la pegamos en la consola bash
pip install flask flask-sqlalchemy flask-marshmallow marshmallow-sqlalchemy pymysql  -U flask-cors 

<script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>

///Resend https://resend.com/docs/send-with-python email

virtualeDatabase host address:rweissmann1.mysql.pythonanywhere-services.com
Username:rweissmann1
Clave RWei10669#$ 

Since you have a free account, you will only be able to connect to your database using code running inside PythonAnywhere.

Your databases: 
Click a database's name to start a MySQL console logged in to it.
Name db
RaulWeissmann$RinconBotanico
host address:RaulWeissmann1.mysql.pythonanywhere-services.com
site para ver rweissmann1.pythonanywhere.com/plantas ..

Create a database
Your database names always start with your username + "$". There's no need to type that prefix in below, though: PythonAnywhere will automatically add it.

from app import app, db   #,ma
from sqlalchemy import Column, Integer, Table #, ForeignKey

Configuration for RaulWeissmann.pythonanywhere.com
Reload:
Best before date:
We're happy to host your free website -- and keep it free -- for as long as you want to keep it running, but you'll need to log in at least once every three months and click the "Run until 3 months from today" button below. We'll send you an email a week before the site is disabled so that you don't forget to do that. See here for more details.

This site will be disabled on Tuesday 24 September 2024
Paying users' sites stay up forever without any need to log in to keep them running.

Traffic: How busy is your site?
This month (previous month)	0	(0)
Today (yesterday)	0	(0)
Hour (previous hour)	0	(0)
Want some more data? Paying accounts get pretty charts ;-)

Code:
What your site is running.

Source code:
/home/RaulWeissmann/mysite

Go to directory
Working directory:
/home/RaulWeissmann/

Go to directory
WSGI configuration file:/var/www/raulweissmann_pythonanywhere_com_wsgi.py
Python version: 3.10
Virtualenv: Use a virtualenv to get different versions of flask, django etc from our default system ones. 
More info here. You need to Reload your web app to activate it; 
pipNB - will do nothing if the virtualenv does not exist.

Enter path to a virtualenv, if desired

Log files:
The first place to look if something goes wrong.

Access log:raulweissmann.pythonanywhere.com.access.log
Error log:raulweissmann.pythonanywhere.com.error.log
Server log:raulweissmann.pythonanywhere.com.server.log
Log files are periodically rotated. You can find old logs here: /var/log

Static files:
Files that aren't dynamically generated by your code, like CSS, JavaScript or uploaded files, can be served much faster straight off the disk if you specify them here. You need to Reload your web app to activate any changes you make to the mappings below.

URL	Directory	Delete
Enter URL	Enter path	
Security:
An HTTPS certificate is needed so that people can access your site securely. We automatically provide a certificate for RaulWeissmann.pythonanywhere.com.

HTTPS certificate:Automatically provided for this hostname
You need to Reload your web app to activate any changes made below.

Forcing HTTPS means that anyone who goes to your site using the insecure http URL will immediately be redirected to the secure https one. More information here.

Force HTTPS:
Password protection is ideal for sites that are under development when you don't want anyone to see them yet.

Password protection:
Username:Enter a username
Password:Enter a password
Disable:
You can temporarily turn off your web site by disabling it. You can always re-enable it later.

Delete:
Deleting this web app will remove your web app from the Internet, but will not remove your code. The WSGI configuration file will be backed up.

Otro Foro
Habilitar conexión remota a MySQL
Muchos sitios web y aplicaciones empiezan alojando tanto su servidor web como su base de datos en un mismo host.

Con el tiempo, sin embargo, una configuración como esta puede presentar dificultades para escalar.

Una solución a este problema consiste en:

Configurar una base de datos con conexión remota.

De modo que tanto el servidor web, como la base de datos, crezcan a su propio ritmo en sus correspondientes host.

Un host hace referencia a una máquina física o virtual.

Uno de los problemas más comunes que tienen los usuarios es que:

Cuando intentan configurar una base de datos MySQL remota, su instancia de MySQL se encuentra configurada para escuchar únicamente conexiones a nivel local.

Pero es de esperarse, ya que:

Por defecto MySQL viene configurado para escuchar solo conexiones locales.

Veamos entonces cómo habilitar el acceso remoto a una base de datos MySQL.

Paso 1: Permitir a MySQL escuchar tráfico externo
A fin de habilitar un acceso remoto a MySQL es necesario que se habilite la escucha de direcciones IP externas.

Para activar esto, abre tu archivo mysqld.cnf:

sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf
Allí debes ubicar la línea que empieza con la directiva bind-address.

Por defecto, el valor asignado es 127.0.0.1.

Esto significa que el servidor permitirá únicamente conexiones locales.

Tienes que cambiar esta directiva para que haga referencia a una dirección IP externa.

Con fines demostrativos, podemos usar wildcards (comodines) y permitir conexiones remotas en general, sin restringir a direcciones IP específicas.

Para esto asignamos el valor como *, ::, o 0.0.0.0:

lc-messages-dir = /usr/share/mysql
skip-external-locking
#
# Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
bind-address            = 0.0.0.0
Luego de cambiar esta línea, guarda y cierra el archivo.

Si editaste con nano, usa los comandos CTRL + X, Y, y luego ENTER.

Luego reinicia el servicio de MySQL para que los cambios realizados en mysqld.cnf tengan efecto:

sudo systemctl restart mysql
Paso 2: Permitir la conexión remota a un usuario de MySQL
Para esto, primero que todo debes conectarte a tu cliente de MySQL.

Para hacer ello, ejecuta el siguiente comando:

sudo mysql
Si tienes habilitada la autenticación por contraseña para tu usuario root, necesitarás usar en cambio el siguiente comando de MySQL:

mysql -u root -p
Alternativa 1: Actualizar un usuario existente
Si tienes un usuario de MySQL existente que quieres usar para conectarte a la base de datos de forma remota, necesitarás configurar dicho usuario para que pueda conectarse desde un servidor remoto en vez de localhost.

Para cambiar el host de un usuario, puedes usar el comando RENAME USER de MySQL.

Si el usuario que usarás para conectarte de forma remota se llama pym, entonces usarás un comando como el siguiente:

RENAME USER 'pym'@'localhost' TO 'pym'@'ip_servidor_remoto';
En el comando anterior debes reemplazar ip_servidor_remoto por la ip del servidor remoto (o computadora) desde donde realizarás la conexión.

Alternativa 2 (recomendada): Crear un nuevo usuario
De manera alternativa, puedes crear un usuario nuevo, que podrá conectarse únicamente desde el host remoto.

Ello lo puedes hacer con el siguiente comando:

CREATE USER 'pym'@'ip_servidor_remoto' IDENTIFIED BY 'password';
Recuerda que:

Debes reemplazar pym por el nombre de usuario que quieres usar, y password por la contraseña que quieras asignarle.
Si reemplazas ip_servidor_remoto por %, el usuario admitirá conexiones remotas desde cualquier IP.
Luego debes asignar al nuevo usuario los privilegios apropiados según tus necesidades.

El siguiente ejemplo otorga al usuario privilegios globales para crear (CREATE), modificar (ALTER), y eliminar (DROP) bases de datos, tablas, y usuarios.
Así como permisos para hacer INSERT, UPDATE, y DELETE sobre cualquier tabla.
También le permite consultar datos con SELECT, crear claves foráneas con la palabra reservada REFERENCES, y realizar operaciones FLUSH (con el privilegio RELOAD).
Recuerda asignar sólo los permisos necesarios según tu caso en particular.

GRANT CREATE, ALTER, DROP, INSERT, UPDATE, DELETE, SELECT, REFERENCES, RELOAD on *.* TO 'pym'@'ip_servidor_remoto' WITH GRANT OPTION;
Luego de esto, es una buena práctica ejecutar el comando:

FLUSH PRIVILEGES;
Y finalmente puedes salir del cliente de MySQL ejecutando exit.

Paso 3: Habilitar el puerto de MySQL en el firewall
Por último, asumiendo que tienes un firewall configurado en tu servidor de base de datos, también necesitarás abrir el puerto 3306, que es el puerto con que trabaja MySQL por defecto.

Si planeas acceder al servidor de base de datos desde una máquina en particular, puedes otorgar el permiso de acceso de manera específica con el siguiente comando.

sudo ufw allow from remote_IP_address to any port 3306
Sólo debes reemplazar remote_IP_address con la dirección IP de la máquina desde la cuál planeas conectarte.

Con fines prácticos:

Si estás aprendiendo o experimentando con un entorno de prueba, también puedes permitir conexiones a tu servicio de MySQL desde cualquier dirección IP, usando el siguiente comando:

sudo ufw allow 3306
Paso 4: Verificar la conexión remota
Para verificar que la conexión remota ya funciona, prueba a conectarte desde otra máquina.

Puedes hacer ello con el siguiente comando, reemplazando user con tu nombre de usuario, y database_server_ip por la IP de tu servidor de bases de datos.

mysql -u user -h database_server_ip -p
También bien puedes conectarte desde un programa con interfaz de usuario.

Por ejemplo, usando Workbench, Sequel Pro o DataGrip.